import pandas as pd 
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
%matplotlib inline

train = pd.read_csv('titanic_train.csv')
train.head()

#heatmap to see where we have the largest amount of missing data
sns.heatmap(train.isnull(), yticklabels = False, cbar = False, cmap = 'viridis')
sns.set_style('whitegrid')

#plotting the number of people who survived
sns.countplot(x = 'Survived', data = train)

#plotting the number of people who survived hue on sex
sns.countplot(x = 'Survived', hue = 'Sex',data = train, palette = 'RdBu_r')
#people who not survived are much more liklely to be male 

#survivers based on passenger class
sns.countplot(x = 'Survived', hue = 'Pclass',data = train)

sns.distplot(train['Age'].dropna(), kde= False, bins = 30)

train.info()
sns.countplot(x = 'SibSp', data = train)
train['Fare'].hist(bins = 40, figsize = (10,4))

plt.figure(figsize= (10,7))
sns.boxplot(x = 'Pclass', y = 'Age', data = train)
#passengers in 1st class tend to be older than passengers in other class

mean_age = train.groupby('Pclass').mean()
age_col = mean_age['Age']
round(age_col)

def impute_age(cols):
    Age = cols[0]
    Pclass = cols[1]
    
    if pd.isnull(Age):
        
        if Pclass == 1:
            return 38
        elif Pclass == 2:
            return 30
        else:
            return 25
    else:
        return Age
        
train['Age'] = train[['Age','Pclass']].apply(impute_age, axis = 1)
sns.heatmap(train.isnull(),yticklabels=False, cbar = False,cmap = 'viridis')
#too much missing info in column "CABIN"
train.drop('Cabin', axis = 1, inplace = True)
train.dropna(inplace = True)

#creating dummy variables to explain categorical data
sex = pd.get_dummies(train['Sex'], drop_first=True)
embark = pd.get_dummies(train['Embarked'], drop_first=True)

train = pd.concat([train, sex, embark], axis = 1)
train.drop(['Sex', 'Embarked','Name','Ticket'], axis = 1, inplace = True)
train.drop('PassengerId', axis = 1, inplace = True)

X = train.drop('Survived', axis = 1)
y = train['Survived']

from sklearn.cross_validation import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=101)

from sklearn.linear_model import LogisticRegression

logmodel = LogisticRegression()

logmodel.fit(X_train, y_train)

predictions = logmodel.predict(X_test)
from sklearn.metrics import classification_report

print(classification_report(y_test, predictions))
